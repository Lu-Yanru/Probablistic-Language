// Based on http://forestdb.org/models/overinf.html (2019-08-14)

var alpha = 1
var c = 0

var states = ["big_blue","small_blue","small_red"]

var utterances = ["big", "small", "blue", "red", "big_blue", "small_blue", "small_red"]     	

var statePrior = function() {
	return uniformDraw(states)
};

var utterancePrior = function() {
  return uniformDraw(utterances)
};

// boolean semanics (not degree)
var meaning = function(utterance, obj){
  _.includes(obj, utterance)
}

var cost = {
	big: 0,
	small: 0,
	blue: 0,
	red: 0,
	big_blue: c,
	small_blue: c,
	small_red: c
}

// literal listener
var literalListener = cache(function(utt) {
  return Infer({method:"enumerate"},
               function(){
    var state = statePrior()
    condition(meaning(utt,state))
    return state
  })
});

// pragmatic speaker
var speaker = cache(function(state) {
  return Infer({method:"enumerate"},
               function(){
    var utt = utterancePrior()
    factor(alpha * (literalListener(utt).score(state)-cost[utt]))
    return utt
  })
});

speaker("big_blue")
// one way to eliminate the possibility of saying only "blue" -> increase alpha
// reduce possibility of saying "big" -> usu complex utterances more costly





// relaxed semantics modal
// maybe size adj (lower fidelity) inherently noisier than color adj (higher fidality)
// non-deterministic semantics -> intermediate value btw 0-1
var alpha = 30
var size_fidelity = 0.8 // lower fidelity, more noise, less usefull if produced in addition to color term (when only color term necessary)/alone (when sitz alone necessary)
var color_fidelity = 0.99
var size_cost = 0  // can get asymmetry in production without assuming asymmetry in cost
var color_cost = 0

var states = [
	{size: "big", color: "blue"},
	{size: "small", color: "blue"},
	{size: "small", color: "red"}]

var utterances = ["big", "small", "blue", "red", "big_blue", "small_blue", "small_red"]     

var colors = ["red", "blue"]
var sizes = ["big", "small"]	

var statePrior = function() {
	return uniformDraw(states)
};

var utterancePrior = function() {
  return uniformDraw(utterances)
};

//meaning function
// assumes that 2-word utterances consist of SIZE_COLOR, in that order
var meaning = function(utt, obj) {
  var splitWords = utt.split('_')
  if (splitWords.length == 1) {
    var word = splitWords[0]
    if(_.includes(colors, word))
      return word == obj.color ? color_fidelity : 1-color_fidelity;
    else if (_.includes(sizes, word))
      return word == obj.size ? size_fidelity : 1-size_fidelity;
  } else if (splitWords.length == 2) {
    var size_value = splitWords[0] == obj.size ? size_fidelity : 1-size_fidelity;
    var color_value = splitWords[1] == obj.color ? color_fidelity : 1-color_fidelity;
    return size_value*color_value  // relative noise term of size and color analysis
  } else 
    console.error("bad utterance length: "+splitWords.length)
};

var cost = {
	big: size_cost,
	small: size_cost,
	blue: color_cost,
	red: color_cost,
	big_blue: size_cost+color_cost,
	small_blue: size_cost+color_cost,
	small_red: size_cost+color_cost
}

// literal listener
var literalListener = cache(function(utt) {
  return Infer({method:"enumerate"},
               function(){
    var state = statePrior()
    factor(meaning(utt,state))
    return state
  })
});

// pragmatic speaker
var speaker = cache(function(state) {
  return Infer({method:"enumerate"},
               function(){
    var utt = utterancePrior()
    factor(alpha * (literalListener(utt).score(state)-cost[utt])) // utility function: trade-off of informativeness and cost
    return utt
  })
});


viz(speaker({"size": "big", "color": "blue"}))
viz.table(literalListener("big_blue"))
